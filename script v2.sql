CREATE
  TABLE ANUNCIO
  (
    ID_ANUNCIO           NUMBER NOT NULL ,
    ID_INMUEBLE          NUMBER ,
    FECHA_PUBLIC         DATE ,
    ID_PERIODICO         NUMBER ,
    PRECIO               NUMBER ,
    INMUEBLE_ID_INMUEBLE NUMBER NOT NULL
  ) ;
CREATE UNIQUE INDEX ANUNCIO__IDX ON ANUNCIO
  (
    INMUEBLE_ID_INMUEBLE ASC
  )
  ;
ALTER TABLE ANUNCIO ADD CONSTRAINT ANUNCIO_PK PRIMARY KEY ( ID_ANUNCIO ) ;


CREATE
  TABLE ASISTENTE
  (
    ASISTENTE_ID NUMBER NOT NULL
  ) ;
ALTER TABLE ASISTENTE ADD CONSTRAINT ASISTENTE_PK PRIMARY KEY ( ASISTENTE_ID )
;


CREATE
  TABLE CLIENTE
  (
    CLIENTE_ID    NUMBER NOT NULL ,
    ID_CLIENTE    NUMBER NOT NULL ,
    NOMBRE        VARCHAR2 (350) ,
    TELEFONO      NUMBER ,
    TIPO_INMB     VARCHAR2 (200) ,
    TIEMPO_ARRIEN DATE
  ) ;
ALTER TABLE CLIENTE ADD CONSTRAINT CLIENTE_PK PRIMARY KEY ( CLIENTE_ID ) ;
ALTER TABLE CLIENTE ADD CONSTRAINT CLIENTE_ID_CLIENTE_UN UNIQUE ( ID_CLIENTE )
;

CREATE
  TABLE CONTRATO
  (
    ID_CONTRATO        NUMBER ,
    NUM_CLIENTE        NUMBER ,
    ID_PROPIET         NUMBER ,
    DURACION_CON       DATE ,
    FECHA_INIC         DATE ,
    FECHA_FIN          DATE ,
    MODO_PAGO          VARCHAR2 (100) ,
    CLIENTE_CLIENTE_ID NUMBER NOT NULL,
    
    CONSTRAINT IDCONTRATO_PK PRIMARY KEY (ID_CONTRATO) 
  ) ;


CREATE
  TABLE DIRECTOR
  (
    ID_EMPLEADO NUMBER NOT NULL ,
    FECHA_NOMB  DATE ,
    BONO        NUMBER
  ) ;
ALTER TABLE DIRECTOR ADD CONSTRAINT DIRECTOR_PK PRIMARY KEY ( ID_EMPLEADO ) ;


CREATE
  TABLE EMPLEADO
  (
    ID_EMPLEADO              NUMBER NOT NULL ,
    NOMBRE                   VARCHAR2 (300) ,
    DIRECCION                VARCHAR2 (350) ,
    CATEGORIA                VARCHAR2 (100) ,
    SALARIO                  NUMBER ,
    NUM_SUCURSAL             NUMBER ,
    ID_SUCURSAL              NUMBER ,
    DIRECTOR_ID_EMPLEADO     NUMBER NOT NULL ,
    ASISTENTE_ASISTENTE_ID   NUMBER NOT NULL ,
    SUPERVISOR_SUPERVISOR_ID NUMBER NOT NULL ,
    REGISTRO_REGISTRO_ID     NUMBER NOT NULL,
    
    CONSTRAINT EMPLEADO_PK PRIMARY KEY (ID_EMPLEADO)
    
  ) ;
CREATE UNIQUE INDEX EMPLEADO__IDX ON EMPLEADO
  (
    DIRECTOR_ID_EMPLEADO ASC
  )
  ;
CREATE UNIQUE INDEX EMPLEADO__IDXv1 ON EMPLEADO
  (
    ASISTENTE_ASISTENTE_ID ASC
  )
  ;
CREATE UNIQUE INDEX EMPLEADO__IDXv2 ON EMPLEADO
  (
    SUPERVISOR_SUPERVISOR_ID ASC
  )
  ;
CREATE UNIQUE INDEX EMPLEADO__IDXv3 ON EMPLEADO
  (
    REGISTRO_REGISTRO_ID ASC
  )
  ;


CREATE
  TABLE EMPRESARIAL
  (
    EMPRESARIAL_ID NUMBER NOT NULL ,
    TIPO_EMPRES    VARCHAR2 (100) ,
    NOM_CONTACT    VARCHAR2 (350)
  ) ;
ALTER TABLE EMPRESARIAL ADD CONSTRAINT EMPRESARIAL_PK PRIMARY KEY (
EMPRESARIAL_ID ) ;


CREATE
  TABLE INMUEBLE
  (
    ID_INMUEBLE             NUMBER NOT NULL ,
    NUM_INMUEBLE            NUMBER ,
    CALLE                   VARCHAR2 (300) ,
    COD_POST                NUMBER ,
    TIPO                    VARCHAR2 (30) ,
    NUM_HABIT               NUMBER ,
    VALOR_ARRIENDO          NUMBER ,
    ID_PRIEDAD              NUMBER ,
    PROPIETARIO_ID_PROPIET1 NUMBER NOT NULL
  ) ;
ALTER TABLE INMUEBLE ADD CONSTRAINT INMUEBLE_PK PRIMARY KEY ( ID_INMUEBLE ) ;


CREATE
  TABLE PERIODICO
  (
    ID_PERIODICO       NUMBER NOT NULL ,
    NOMBRE             VARCHAR2 (200) ,
    DIRECCION          VARCHAR2 (350) ,
    TELEFONO           NUMBER ,
    NOM_CONTACTO       VARCHAR2 (300) ,
    ANUNCIO_ID_ANUNCIO NUMBER NOT NULL
  ) ;
CREATE UNIQUE INDEX PERIODICO__IDX ON PERIODICO
  (
    ANUNCIO_ID_ANUNCIO ASC
  )
  ;
ALTER TABLE PERIODICO ADD CONSTRAINT PERIODICO_PK PRIMARY KEY ( ID_PERIODICO )
;


CREATE
  TABLE PRIVADO
  (
    ID_PROPIET NUMBER NOT NULL ,
    NOMBRE     VARCHAR2 (350)
  ) ;
ALTER TABLE PRIVADO ADD CONSTRAINT PRIVADO_PK PRIMARY KEY ( ID_PROPIET ) ;


CREATE
  TABLE PROPIETARIO
  (
    ID_PROPIET1                NUMBER NOT NULL ,
    DIRACCION                  VARCHAR2 (350) ,
    TELEFONO                   NUMBER ,
    PRIVADO_ID_PROPIET         NUMBER NOT NULL ,
    EMPRESARIAL_EMPRESARIAL_ID NUMBER NOT NULL
  ) ;
CREATE UNIQUE INDEX PROPIETARIO__IDX ON PROPIETARIO
  (
    PRIVADO_ID_PROPIET ASC
  )
  ;
CREATE UNIQUE INDEX PROPIETARIO__IDXv1 ON PROPIETARIO
  (
    EMPRESARIAL_EMPRESARIAL_ID ASC
  )
  ;
ALTER TABLE PROPIETARIO ADD CONSTRAINT PROPIETARIO_PK PRIMARY KEY ( ID_PROPIET1
) ;


CREATE
  TABLE REGISTRO
  (
    REGISTRO_ID        NUMBER NOT NULL ,
    ID_REGISTRO        NUMBER ,
    FECHA_REGISTRO     DATE ,
    ID_EMPLEADO1       NUMBER ,
    ID_CLIENTE         NUMBER ,
    CLIENTE_CLIENTE_ID NUMBER NOT NULL
  ) ;
CREATE UNIQUE INDEX REGISTRO__IDX ON REGISTRO
  (
    CLIENTE_CLIENTE_ID ASC
  )
  ;
ALTER TABLE REGISTRO ADD CONSTRAINT REGISTRO_PK PRIMARY KEY ( REGISTRO_ID ) ;


CREATE
  TABLE SUCURSAL
  (
    ID_SUCURSAL          NUMBER ,
    CALLE                VARCHAR2 (350) ,
    CIUDAD               VARCHAR2 (150) ,
    COD_POSTAL           NUMBER ,
    TELEFONO             NUMBER ,
    SUCURSAL_ID          NUMBER NOT NULL ,
    EMPLEADO_EMPLEADO_ID NUMBER NOT NULL
  ) ;
CREATE UNIQUE INDEX SUCURSAL__IDX ON SUCURSAL
  (
    EMPLEADO_EMPLEADO_ID ASC
  )
  ;
ALTER TABLE SUCURSAL ADD CONSTRAINT SUCURSAL_PK PRIMARY KEY ( SUCURSAL_ID ) ;


CREATE
  TABLE SUPERVISOR
  (
    SUPERVISOR_ID NUMBER NOT NULL
  ) ;
ALTER TABLE SUPERVISOR ADD CONSTRAINT SUPERVISOR_PK PRIMARY KEY ( SUPERVISOR_ID
) ;


ALTER TABLE ANUNCIO ADD CONSTRAINT ANUNCIO_INMUEBLE_FK FOREIGN KEY (
INMUEBLE_ID_INMUEBLE ) REFERENCES INMUEBLE ( ID_INMUEBLE ) ;

ALTER TABLE CONTRATO ADD CONSTRAINT CONTRATO_CLIENTE_FK FOREIGN KEY (
CLIENTE_CLIENTE_ID ) REFERENCES CLIENTE ( CLIENTE_ID ) ;

ALTER TABLE EMPLEADO ADD CONSTRAINT EMPLEADO_ASISTENTE_FK FOREIGN KEY (
ASISTENTE_ASISTENTE_ID ) REFERENCES ASISTENTE ( ASISTENTE_ID ) ;

ALTER TABLE EMPLEADO ADD CONSTRAINT EMPLEADO_DIRECTOR_FK FOREIGN KEY (
DIRECTOR_ID_EMPLEADO ) REFERENCES DIRECTOR ( ID_EMPLEADO ) ;

ALTER TABLE EMPLEADO ADD CONSTRAINT EMPLEADO_REGISTRO_FK FOREIGN KEY (
REGISTRO_REGISTRO_ID ) REFERENCES REGISTRO ( REGISTRO_ID ) ;

ALTER TABLE EMPLEADO ADD CONSTRAINT EMPLEADO_SUPERVISOR_FK FOREIGN KEY (
SUPERVISOR_SUPERVISOR_ID ) REFERENCES SUPERVISOR ( SUPERVISOR_ID ) ;

ALTER TABLE INMUEBLE ADD CONSTRAINT INMUEBLE_PROPIETARIO_FK FOREIGN KEY (
PROPIETARIO_ID_PROPIET1 ) REFERENCES PROPIETARIO ( ID_PROPIET1 ) ;

ALTER TABLE PERIODICO ADD CONSTRAINT PERIODICO_ANUNCIO_FK FOREIGN KEY (
ANUNCIO_ID_ANUNCIO ) REFERENCES ANUNCIO ( ID_ANUNCIO ) ;

ALTER TABLE PROPIETARIO ADD CONSTRAINT PROPIETARIO_EMPRESARIAL_FK FOREIGN KEY (
EMPRESARIAL_EMPRESARIAL_ID ) REFERENCES EMPRESARIAL ( EMPRESARIAL_ID ) ;

ALTER TABLE PROPIETARIO ADD CONSTRAINT PROPIETARIO_PRIVADO_FK FOREIGN KEY (
PRIVADO_ID_PROPIET ) REFERENCES PRIVADO ( ID_PROPIET ) ;

ALTER TABLE REGISTRO ADD CONSTRAINT REGISTRO_CLIENTE_FK FOREIGN KEY (
CLIENTE_CLIENTE_ID ) REFERENCES CLIENTE ( CLIENTE_ID ) ;

ALTER TABLE SUCURSAL ADD CONSTRAINT SUCURSAL_EMPLEADO_FK FOREIGN KEY (
EMPLEADO_EMPLEADO_ID ) REFERENCES EMPLEADO ( EMPLEADO_ID ) ;

CREATE SEQUENCE ASISTENTE_ASISTENTE_ID_SEQ START WITH 1 NOCACHE ORDER ;
CREATE OR REPLACE TRIGGER ASISTENTE_ASISTENTE_ID_TRG BEFORE
  INSERT
    ON ASISTENTE FOR EACH ROW WHEN
    (
      NEW.ASISTENTE_ID IS NULL
    )
    BEGIN :NEW.ASISTENTE_ID := ASISTENTE_ASISTENTE_ID_SEQ.NEXTVAL;
END;
/

CREATE SEQUENCE CLIENTE_CLIENTE_ID_SEQ START WITH 1 NOCACHE ORDER ;
CREATE OR REPLACE TRIGGER CLIENTE_CLIENTE_ID_TRG BEFORE
  INSERT
    ON CLIENTE FOR EACH ROW WHEN
    (
      NEW.CLIENTE_ID IS NULL
    )
    BEGIN :NEW.CLIENTE_ID := CLIENTE_CLIENTE_ID_SEQ.NEXTVAL;
END;
/

CREATE SEQUENCE EMPLEADO_EMPLEADO_ID_SEQ START WITH 1 NOCACHE ORDER ;
CREATE OR REPLACE TRIGGER EMPLEADO_EMPLEADO_ID_TRG BEFORE
  INSERT
    ON EMPLEADO FOR EACH ROW WHEN
    (
      NEW.EMPLEADO_ID IS NULL
    )
    BEGIN :NEW.EMPLEADO_ID := EMPLEADO_EMPLEADO_ID_SEQ.NEXTVAL;
END;
/

CREATE SEQUENCE EMPRESARIAL_EMPRESARIAL_ID_SEQ START WITH 1 NOCACHE ORDER ;
CREATE OR REPLACE TRIGGER EMPRESARIAL_EMPRESARIAL_ID_TRG BEFORE
  INSERT
    ON EMPRESARIAL FOR EACH ROW WHEN
    (
      NEW.EMPRESARIAL_ID IS NULL
    )
    BEGIN :NEW.EMPRESARIAL_ID := EMPRESARIAL_EMPRESARIAL_ID_SEQ.NEXTVAL;
END;
/

CREATE SEQUENCE REGISTRO_REGISTRO_ID_SEQ START WITH 1 NOCACHE ORDER ;
CREATE OR REPLACE TRIGGER REGISTRO_REGISTRO_ID_TRG BEFORE
  INSERT
    ON REGISTRO FOR EACH ROW WHEN
    (
      NEW.REGISTRO_ID IS NULL
    )
    BEGIN :NEW.REGISTRO_ID := REGISTRO_REGISTRO_ID_SEQ.NEXTVAL;
END;
/

CREATE SEQUENCE SUCURSAL_SUCURSAL_ID_SEQ START WITH 1 NOCACHE ORDER ;
CREATE OR REPLACE TRIGGER SUCURSAL_SUCURSAL_ID_TRG BEFORE
  INSERT
    ON SUCURSAL FOR EACH ROW WHEN
    (
      NEW.SUCURSAL_ID IS NULL
    )
    BEGIN :NEW.SUCURSAL_ID := SUCURSAL_SUCURSAL_ID_SEQ.NEXTVAL;
END;
/

CREATE SEQUENCE SUPERVISOR_SUPERVISOR_ID_SEQ START WITH 1 NOCACHE ORDER ;
CREATE OR REPLACE TRIGGER SUPERVISOR_SUPERVISOR_ID_TRG BEFORE
  INSERT
    ON SUPERVISOR FOR EACH ROW WHEN
    (
      NEW.SUPERVISOR_ID IS NULL
    )
    BEGIN :NEW.SUPERVISOR_ID := SUPERVISOR_SUPERVISOR_ID_SEQ.NEXTVAL;
END;
/

/* Función */

CREATE OR REPLACE FUNCTION cumple_semana
(fecha_nac in date) return VARCHAR
AS NOMBRE VARCHAR;
BEGIN
SELECT NOMBRE
  FROM empleados
 WHERE TO_DATE(TO_CHAR(FECHA_NAC,'MMDD'),'MMDD') 
       BETWEEN trunc(SYSDATE-7) AND trunc(SYSDATE+7);
END cumple_semana;
/

/* Procedure */

CREATE OR REPLACE 
PROCEDURE Actualiza_Salario(cuenta NUMBER, 
                          new_saldo NUMBER)
IS
	cuenta := 0;
	salario :=0;
  -- Declaracion de variables locales
BEGIN
  -- Sentencias
  UPDATE SALDOS_CUENTAS 
	SET SALDO = new_saldo, 
            FX_ACTUALIZACION = SYSDATE
  WHERE CO_CUENTA = cuenta;

END Actualiza_Saldo;

BEGIN
  Actualiza_Saldo(200501,2500);
  COMMIT;
END;

/* Trigger */

CREATE OR REPLACE TRIGGER Print_salary_changes
  BEFORE DELETE OR INSERT OR UPDATE ON Emp_tab
  FOR EACH ROW
WHEN (new.Empno > 0)
DECLARE
    sal_diff number;
BEGIN
    sal_diff  := :new.sal  - :old.sal;
    dbms_output.put('Old salary: ' || :old.sal);
    dbms_output.put('  New salary: ' || :new.sal);
    dbms_output.put_line('  Difference ' || sal_diff);
END;
/


/* Cursor */

DECLARE
       CURSOR cemp(pnombre IN VARCHAR2) IS 
       SELECT salario, dni
       FROM empleados
       WHERE nombre = pnombre;
       cepm_rec cemp%ROWTYPE; 
       vnombre VARCHAR2(20); 
     BEGIN
       vnombre := 'Juan';
       DBMS_OUTPUT.PUT_LINE
         ('Sueldo de los empleados con nombre ' || vnombre);
       OPEN cemp(vnombre);
       LOOP
         FETCH cemp INTO cemp_rec;
         DBMS_OUTPUT.PUT_LINE
           (cemp_rec.dni || ' ' || cemp_rec.salario);
         EXIT WHEN cemp%NOTFOUND; -- Último registro.
       END LOOP;
       DBMS_OUTPUT.PUT_LINE
         ('Número de empleados procesados ' || cemp%ROWCOUNT);
       CLOSE cemp;
     END;